day05 回顾:
  for 语句
    for 变量列表 in 可迭代对象:
        语句块1
    else:
        语句块2

    用break 结束循环时，else子句不会被执行
  range函数
    range(stop)
    range(start, stop[, step])
  continue 语句
      while语句
          while 真值表达式:
               .....
      for语句
          for x in 可迭代对象:
               ...

列表:
  []
  [1,2,3]
  list()
  list(可迭代对象)
     list('ABCD')
     list(range(4))
     list([2,3,5,7])
  列表的运算:
    +  +=  *  *= 
  列表的比较运算:
    < <= > >= == !=


day06笔记:
列表的 in / not in
  1. 判断一个数据元素是否存在于容器(列表)内，如果存在返回True, 否则返回False
  2. not in 的返回值与 in运算符相反

示例:
  x = [1, 'Two', 3.14, '四']
  1 in x        # True
  2 in x        # False
  3 not in x    # True
  '四' not in x # False


列表的 索引 index / 切片 slice
  列表的索引语句:
    列表[整数表达式]
  用法:
    列表的索引取值与字符串的索引取值规则完全相同
    列表的索引为分正向索引和反向索引
  示例:
    L = ['A', 2, 'B', 3]
    print(L[1])  # 2
    x = L[2]   # x = 'B'

列表的索引赋值
  列表是可变的序列，可以通过索引赋值改变列表中的元素
语法:
  列表[索引] = 表达式

示例:
  x = [1,2,3,4]
  x[2] = 3.14  # 改变了第三个元素的值


列表的切片
  列表[:]
  列表的[::]
  列表的切片取值返回一个列表，规则等同于字符串的切片规则

  示例:
    x = list(range(9))
    y = x[1:9:2]  # y = [1,3,5,7]

  列表的切片赋值语法:
    列表[切片] = 可迭代对象
  说明:
    切片赋值的赋值运算符的右侧必须是一个可迭代对象
  示例:
    L = [2,3,4]
    L[0:1] = [1.1, 2.2]
    print(L)  # [1.1, 2.2, 3, 4]
    L = [2,3,4]
    L[:] = [7,8]
    L = [2,3,4]
    L[1:2] = [3.1, 3.2, 3.3]
              # [2,3.1, 3.2, 3.3,4]
    L = [2,3,4]
    L[1:1] = [2.1, 2.2]  # [2, 2.1, 2.2, 3, 4]
    L = [2,3,4] 
    L[0:0] = [0, 1]   # L=[0, 1, 2,3,4]   
    L = [2,3,4] 
    L[3:3] = [5,6]  # L=[2,3,4, 5,6]
    L = [2,3,4]
    L[1:2] = []

切片步长不为1的切片赋值:
   L = list(range(1, 9))
   L[1::2] = [2.2, 4.4, 6.6, 8.8]
   print(L)  # 
切片注意事项:
  对于步长不等于1的切片赋值，赋值运算符的右侧的可迭代对象提供元素的个数一定要等于切片切出的段数
  如:
    L = [1,2,3,4,5,6]
    L[::2] = 'ABCD'  # 错的
    L[::2] = 'ABC'   # 对的



del 语句用于删除列表元素
  语法:
    del 列表[索引]
    del 列表[切片]
  示例:
    L = [1,2,3,4,5,6]
    del L[0]  # L = [2,3,4,5,6]
    del L[-1]  # L = [2,3,4,5]
    L = [1,2,3,4,5,6]
    del L[::2]  # L = [2, 4, 6]

python3中常用的序列函数:
  len(x)  返回序列的长度
  max(x)  返回序列的最大值元素
  min(x)  返回序列中最小值元素
  sum(x)  返回序列中所有元素的和(元素必须是数值类型)
  any(x)  真值测试, 如果列表中其中一个值为真值则返回True,否则返回False
  all(x)  真值测试，如果列表中所有值为真值，则返回True,只要有一个为假，则返回False


练习:
  1.已知有列表
    L = [3, 5]
    用索引和切片操作，将列表改为:
    L = [1,2,3,4,5,6]
    将列表反转(前后对调), 然后删除最后一个元素
    print(L)  # [6,5,4,3,2]

  2. 写程序，让用户循环输入一些整数，当输入-1时结束输入，将这些整数存于列表L中
    1) 打印您共输入了几个有效的数?
    2) 打印您输入的数的最大数是多少?
    3) 打印您输入的数的最小数是多少?
    4) 打印您输入这些数的平均值

Python3中常用的列表方法:
  见:python_base_docs_html/list.html

练习:
  写一个程序，输入多行文字，当输入空行时结束输入
  将原输入的所有字符串存于列表L中
  1. 按原来输入的行的顺序反向打印这些行
     列:
       输入:hello world
       输入:welcome to china
       输入:I like python
       输入: <回车>
     显示
       I like python
       welcome to china
       hello world
  2. 打印出您共输入了多少文字符?


字符串文本解析方法 split 和 join
  S.split(sep=None)  将字符串，使用sep作用为隔符分割S字符串，返回分割后的字符串的列表，当不给定参数时，用空白字符作为分隔符进行分割
  S.join(iterable)  用可迭代对象中的字符串，返回一个中间用S进行分隔的字符串

  例:
    s = 'Beijing is capital'
    L = s.split(' ')  # L = ['Beijing', 'is', 'capital']
    s = '\\'
    L = ['C:', 'Programe files', 'python3']
    s2 = s.join(L)  # s2 = b'C:\Programe files\python3'


深拷贝 deep copy 和 浅拷贝 shallow copy

浅拷贝
  是指在复制过程中只复制一层变量，不会复制深层变量绑定的对象的复制过程

  L = [3.1, 3.2]
  L1 = [1, 2, L]
  L2 = L1.copy()  # 等同于 L1[:]  浅拷贝
  print(L1)  # [1, 2, [3.1, 3.2]]
  print(L2)  # [1, 2, [3.1, 3.2]]
  L2[2][0] = 3.14
  print(L1)  # [1, 2, [3.14, 3.2]]
  print(L2)  # [1, 2, [3.14, 3.2]]

深拷贝
  import copy  # 导入copy模块
  L = [3.1, 3.2]
  L1 = [1, 2, L]
  L2 = copy.deepcopy(L1) # 深拷贝
  print(L1)  # [1, 2, [3.1, 3.2]]
  print(L2)  # [1, 2, [3.1, 3.2]]
  L2[2][0] = 3.14
  print(L1)  # [1, 2, [3.1, 3.2]]
  print(L2)  # [1, 2, [3.14, 3.2]]
注:
  深拷贝通常只对可变对象进行复制，不可变对象通常不变


列表推导式 list comprehension
  列表推导式是用可迭代对象依次生成带有多个元素的列表的表达式
 作用：
    用简易方法生成列表
 语法:
  [表达式 for 变量 in 可迭代对象]
  或
  [表达式 for 变量 in 可迭代对象 if 真值表达式]

  示例:
    # 以下生成一个数值为1~9的平方的列表 
    L = [x*x for x in range(1, 10)]

练习:
  用列表推导式生成 1~100内的奇数的列表
    结果 [1,3,5,7,.... 99]

  示例:
    # 以上练习可以改写为:
    L = [x for x in range(1, 
                      100) if x % 2 == 1]

列表推导式的嵌套:
  语法:
   [ 表达式1
    for 变量1 in 可迭代对象1 if 真值表达式1
     for 变量2 in 可迭代对象2 if 真值表达式2
      ...]
  示例:
    L1 = [2, 3, 5]
    L2 = [7, 11, 13]
    # 将L1中的全部元素与L2中的全部元素依次相乘后放到列表L3中
    L3 = [x * y for x in L1 for y in L2]
    print(L3)



练习:
  1. 用字符串s = "ABC" 和 s2 = "123" 生成如下列表:
    ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3', ]

  2. 有一些数存在于列表L 中,如:
    L = [1,3,2,1,6,4,2,.... 98, 82]
       (此数据自己定义)
    将列表L中的数存入于另一个列表L2中（要求,重复出现多次的数字只在L2列表中保留一份)
  3. 生成前40个斐波那契数(Fibonacci)
     1 1 2 3 5 8 13....
     (自第三个起，之后的所有数为前两个数之和)
     要求，将这些数保存在列表中，最后打印列表中的这些数
       提示: 用循环、列表和变量组合可以实现



